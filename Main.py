import json
import telebot
from telebot import types
import re
import time
from threading import Thread
import assemblyai as aai

bot = telebot.TeleBot('MY_TOKEN')


# ----- –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ------ #
data_file = "ivent.json"
one_time_events_file = "iventFast.json"
# --------------------------------------------- #

# --------------------------------------------- #
var_schedule = []
now_time_user = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è: \n –í–∞—à–µ –≤—Ä–µ–º—è: "

# -------------–°—Ç–∞—Ç—É—Å—ã ------------------ #
status_ivent = False
STATUS_DELETE = False
# --------------------------------------- #

count_numbering = None
selected_time_user = ""
days_of_week = [["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "Monday","–î“Ø–π—Å–µ–Ω–±—ñ"], ["–í—Ç–æ—Ä–Ω–∏–∫", "Tuesday","–°–µ–π—Å–µ–Ω–±—ñ"], ["–°—Ä–µ–¥–∞", "Wednesday","–°”ô—Ä—Å–µ–Ω–±—ñ"], ["–ß–µ—Ç–≤–µ—Ä–≥", "Thursday","–ë–µ–π—Å–µ–Ω–±—ñ"],
                    ["–ü—è—Ç–Ω–∏—Ü–∞", "Friday","–ñ“±–º–∞"], ["–°—É–±–±–æ—Ç–∞", "Saturday","–°–µ–Ω–±—ñ"], ["–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "Sunday","–ñ–µ–∫—Å–µ–Ω–±—ñ"]]
number = ["0Ô∏è‚É£", "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", '5Ô∏è‚É£', "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"]

ivent_user_voice = []

number_dict = {
    '–Ω–æ–ª—å': 0, '–æ–¥–∏–Ω': 1, '–¥–≤–∞': 2, '—Ç—Ä–∏': 3, '—á–µ—Ç—ã—Ä–µ': 4,
    '–ø—è—Ç—å': 5, '—à–µ—Å—Ç—å': 6, '—Å–µ–º—å': 7, '–≤–æ—Å–µ–º—å': 8, '–¥–µ–≤—è—Ç—å': 9,
    '–¥–µ—Å—è—Ç—å': 10, '–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å': 11, '–¥–≤–µ–Ω–∞–¥—Ü–∞—Ç—å': 12, '—Ç—Ä–∏–Ω–∞–¥—Ü–∞—Ç—å': 13, '—á–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç—å': 14,
    '–ø—è—Ç–Ω–∞–¥—Ü–∞—Ç—å': 15, '—à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç—å': 16, '—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å': 17, '–≤–æ—Å–µ–º–Ω–∞–¥—Ü–∞—Ç—å': 18, '–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç—å': 19,
    '–¥–≤–∞–¥—Ü–∞—Ç—å': 20, '—Ç—Ä–∏–¥—Ü–∞—Ç—å': 30, '—Å–æ—Ä–æ–∫': 40, '–ø—è—Ç—å–¥–µ—Å—è—Ç': 50,
}

# ------------------- –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ language.json ------------------- #
with open('language.json', 'r', encoding='utf-8') as file:
    dict_lang = json.load(file)
# --------------------------------------------------------------------- #


# ---------- –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö -------------#
def load_data_user():
    with open('data_user.json', 'r', encoding='utf-8') as file:
        return json.load(file)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
def save_data_user(data_user):
    with open('data_user.json', 'w', encoding='utf-8') as file:
        json.dump(data_user, file, ensure_ascii=False, indent=4)
# --------------------------------------------------------------------- #


# # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ json —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
def load_user_data():
    try:
        with open(data_file, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return {}
def save_user_data(user_data):
    with open(data_file, 'w') as file:
        json.dump(user_data, file, ensure_ascii=False, indent=4)
# --------------------------------------------- #

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ json —Å —Ä–∞–∑–æ–≤—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
def load_one_time_events():
    try:
        with open(one_time_events_file, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        return []
def save_one_time_events(one_time_events):
    with open(one_time_events_file, 'w') as file:
        json.dump(one_time_events, file, ensure_ascii=False, indent=4)
# --------------------------------------------- #


# ----------------------------–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –ø—É—Å—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è ------------------- #
def remove_empty_events(UserId):
    data_schedule = load_user_data()
    if UserId in data_schedule:
        check_user_data = lambda user_id: [True for ivent in data_schedule[user_id] if ivent]
        if not check_user_data(UserId):
            data_schedule.pop(UserId)
            save_user_data(data_schedule)
# ------------------------------------------------------------------------------------------------ #

#============================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∑–∞—Ä–∞–Ω–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è ==============================#
def time_mention(user_id):
    lang = load_data_user()[str(user_id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = types.InlineKeyboardMarkup()
    button_time_all = [types.InlineKeyboardButton(text=str(time_H), callback_data="callback_time_before_" + str(time_H)) for time_H in range(0,61,15)]
    keyboard.add(*button_time_all)
    bot.send_message(user_id, dict_lang["Time_before_event"][lang], reply_markup=keyboard)
# =========================================================================================================#

# ========================== –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ======================================== #
@bot.message_handler(commands=['start'])
def hello(message):
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAIT_GVvDhj_iIyQgdIQ6IkRMkgJlYaqAAI2FgACcmugS6XaTV2HP2QpMwQ')
    # –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –±–æ—Ç–∞
    keyboard = types.InlineKeyboardMarkup()
    buttonRu = types.InlineKeyboardButton(text="üá∑üá∫", callback_data="ru")
    buttonEn = types.InlineKeyboardButton(text="üá∫üá∏", callback_data="en")
    buttonKz = types.InlineKeyboardButton(text="üá∞üáø", callback_data="kz")
    keyboard.add(buttonRu, buttonEn, buttonKz)
    bot.send_message(message.chat.id, "Select bot language: ", reply_markup=keyboard, parse_mode='html')

# ============================================================================================= #

# ===================================== –ù–ê–ß–ê–õ–¨–ù–û–ï –ú–ï–ù–Æ ======================================== #
def start(message):
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ  –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    #lang = data_user[str(message.chat.id)]["lang"] # –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    keyboard,user_id = types.InlineKeyboardMarkup(), message.chat.id
    add_schedule = types.InlineKeyboardButton(text = dict_lang['Add_schedule'][lang],     callback_data="add_schedule")
    view_all_schedule = types.InlineKeyboardButton(text = dict_lang['View_schedule'][lang], callback_data="view_all_schedule")
    delete_all_schedule = types.InlineKeyboardButton(text = dict_lang['Delete_schedule'][lang],   callback_data="delete_all_schedule")
    keyboard.add(add_schedule);keyboard.add(view_all_schedule);keyboard.add(delete_all_schedule)

    # view_schedule = types.InlineKeyboardButton(text="üìã–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—èüìã", callback_data="view_schedule")
    # view_schedule_one_time = types.InlineKeyboardButton(text="üìã–†–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—èüìã", callback_data="view_schedule_one_time")
    # delete_schedule = types.InlineKeyboardButton(text="‚ùå–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è‚ùå",   callback_data="delete_schedule")
    # delete_schedule_one_time = types.InlineKeyboardButton(text="‚ùå–†–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è‚ùå",   callback_data="delete_schedule_one_time")
    # keyboard.add(add_schedule);keyboard.add(view_schedule,view_schedule_one_time);keyboard.add(delete_schedule,delete_schedule_one_time)
    bot.send_message(user_id, dict_lang['greetings'][lang], reply_markup=keyboard)
# ============================================================================================= #


# ===================================  –ö–ù–û–ü–ö–ò –í–†–ï–ú–ï–ù–ò ======================================= #
def button_time(user_id,time_user):
    lang = load_data_user()[str(user_id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ  –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    keyboard = types.InlineKeyboardMarkup()
    buttonTimeHour = [types.InlineKeyboardButton(text=str(time_H), callback_data = "callback_" + str(time_H)) for time_H in range(1,10)]
    keyboard.add(*buttonTimeHour)
    keyboard.add(types.InlineKeyboardButton(text="0", callback_data="callback_0"))
    keyboard.add(types.InlineKeyboardButton(text=dict_lang["cancel"][lang], callback_data="callback_cancel"))
    bot.send_message(user_id, time_user, reply_markup=keyboard)
# ============================================================================================= #

# ============================ –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• CALLBACK –∫–Ω–æ–ø–æ–∫ ============================== #
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call): # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–Ω–æ–ø–æ–∫ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É)
    global dict_lang,data_user
# --------------------------- –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ -------------------------- #
    if call.data in ["ru", "en", "kz"]: # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å —è–∑—ã–∫–æ–º
        bot.delete_message(call.message.chat.id, call.message.message_id)
        data_user = load_data_user() # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        if str(call.message.chat.id) not in data_user:
            data_user[str(call.message.chat.id)] = {} # –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª —Å —è–∑—ã–∫–æ–º

        data_user[str(call.message.chat.id)]["lang"] = call.data # –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª —Å —è–∑—ã–∫–æ–º
        save_data_user(data_user) # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

        start(call.message) # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é

    global selected_time_user # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global STATUS_DELETE,count_numbering # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    lang = load_data_user()[str(call.message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --------------------------- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ -------------------------- #
    if call.data == "add_schedule": # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        add_schedule(call.message) # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

# --------------------------- –í—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏ ------------------------------------ #
    now_time_user = dict_lang["Select_time"][lang] + '\n' + dict_lang["Your_time"][lang] # –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏

    if call.data in ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]: # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
        var_schedule.clear() # –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
        var_schedule.append(call.data) # –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–æ–∫
        button_time(call.message.chat.id,now_time_user) # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏

# --------------------------- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ------------------------------------ #
    if call.data in ["callback_" + str(time_H) for time_H in range(0,10)]: # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        selected_time_user += call.data[-1] # –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.delete_message(call.message.chat.id, call.message.message_id) # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏

    # --------------------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ ------------------------------------ #
        if len(selected_time_user) < 5: # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
            if len(selected_time_user) == 2: # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã
                selected_time_user += ":" # –¥–æ–±–∞–≤–∏—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ
            button_time(call.message.chat.id,now_time_user + selected_time_user) # –≤–µ—Ä–Ω—É—Ç—å –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏

    # ---------------------------- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å --------------------------------- #
        if len(selected_time_user) == 5: # –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            if int(selected_time_user.split(':')[0]) > 23 or int(selected_time_user.split(':')[1]) > 59: # –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                bot.send_message(call.message.chat.id, dict_lang["Incorrect_time"][lang]) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
                selected_time_user = "" # –æ–±–Ω—É–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                button_time(call.message.chat.id,now_time_user) # –≤–µ—Ä–Ω—É—Ç—å –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏
            else: # –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                bot.send_message(call.message.chat.id, dict_lang["Your_time"][lang] + selected_time_user) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                var_schedule.append(selected_time_user) # –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ —Å–ø–∏—Å–æ–∫
                selected_time_user = ""  # –æ–±–Ω—É–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                # –≤—ã–∑–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è
                add_event(call.message) # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è
# =========================================================================================== #


# --------------------------- –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è -------------------------- #
    if call.data == "callback_cancel_save": # –æ—Ç–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        var_schedule.clear() # –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start(call.message) # –≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
    if call.data == "callback_save":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        time_mention(call.message.chat.id)

# --------------------------- –ö–Ω–æ–ø–∫–∞ –∑–∞—Ä–∞–Ω–µ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -------------------------- #
    if call.data in ["callback_time_before_" + str(time_H) for time_H in range(0,61,5)]: # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        bot.delete_message(call.message.chat.id, call.message.message_id)
        var_schedule.append(call.data[21:]) # –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –≤ —Å–ø–∏—Å–æ–∫
        bot.send_message(call.message.chat.id, dict_lang["Saving_regular_event"][lang])

        load_user_schedule(call.message.chat.id) # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ñ–∞–π–ª


# --------------------------- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è -------------------------- #
    if call.data == "view_all_schedule":
        # –ø–æ–∫–∞–∑–∞—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        buttonRegular = types.InlineKeyboardButton(text=dict_lang["Regular_event"][lang], callback_data="view_schedule")
        buttonOneTime = types.InlineKeyboardButton(text=dict_lang["One_time_event"][lang], callback_data="view_schedule_one_time")
        keyboard.add(buttonRegular);keyboard.add(buttonOneTime)
        bot.send_message(call.message.chat.id, dict_lang["select_event_type"][lang], reply_markup=keyboard) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

# --------------------------- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π -------------------------- #
    if call.data == "view_schedule": # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        remove_empty_events(str(call.message.chat.id)) # —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π
        show_all_schedule(call.message.chat.id, False,"regular") # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        start(call.message) # –≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
# --------------------------- –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π -------------------------- #
    if call.data == "view_schedule_one_time": # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è"
        show_all_schedule(call.message.chat.id, False,"one_time") # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
        start(call.message) # –≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
    if call.data == "delete_all_schedule": # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        # –ø–æ–∫–∞–∑–∞—Ç—å –¥–≤–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        keyboard = types.InlineKeyboardMarkup()
        buttonRegular = types.InlineKeyboardButton(text=dict_lang["Regular_event"][lang], callback_data="delete_schedule")
        buttonOneTime = types.InlineKeyboardButton(text=dict_lang["One_time_event"][lang], callback_data="delete_schedule_one_time")
        keyboard.add(buttonRegular);keyboard.add(buttonOneTime)
        bot.send_message(call.message.chat.id,  dict_lang["select_event_type"][lang], reply_markup=keyboard) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏


# --------------------------- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è -------------------------- #
    if call.data == "delete_schedule": # –î–µ–π—Å—Ç–≤–∏–µ "–£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
        remove_empty_events(str(call.message.chat.id)) # —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π

        try:
            keyboard = types.InlineKeyboardMarkup()
            count_numbering = show_all_schedule(call.message.chat.id, True,"regular") # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏–π
            # —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            button_numbering = [types.InlineKeyboardButton(text=str(numbering), callback_data="callbackDel_" + str(numbering)) for numbering in range(1, count_numbering + 1)]
            keyboard.add(*button_numbering)

            STATUS_DELETE = True # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            bot.send_message(call.message.chat.id, dict_lang["Number_event_delete"][lang], reply_markup=keyboard) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        except: # –µ—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç
            bot.send_message(call.message.chat.id, dict_lang["lack_schedule"][lang])

# --------------------------- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è -------------------------- #
    if STATUS_DELETE == True and call.data in ["callbackDel_" + str(numbering) for numbering in range(1, count_numbering + 1)]:
        STATUS_DELETE = False # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        bot.delete_message(call.message.chat.id, call.message.message_id) # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        data_schedule = load_user_data() # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if str(call.message.chat.id) in data_schedule: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ
            find_numbering = find_numbering_schedule(str(call.message.chat.id), int(call.data[12:]),type_schedule="regular")  # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
            if find_numbering != False: # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω
                weekday, numbering = find_numbering # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ find_numbering_schedule
                del data_schedule[str(call.message.chat.id)][weekday][numbering] # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                save_user_data(data_schedule) # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                bot.send_message(call.message.chat.id, dict_lang["Deleting_event"][lang]) # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
                start(call.message) # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
            elif find_numbering == False: # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω
                bot.send_message(call.message.chat.id, dict_lang["Incorrect_number_event"][lang])
                start(call.message)
        else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Ñ–∞–π–ª–µ
            bot.send_message(call.message.chat.id, dict_lang["lack_schedule"][lang])
            start(call.message)

# --------------------------- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è -------------------------- #
    if  call.data == "delete_schedule_one_time" : # –î–µ–π—Å—Ç–≤–∏–µ "–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"
        STATUS_DELETE = True  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        count_numbering = show_all_schedule(call.message.chat.id,True,"one_time")  # –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –Ω–æ–º–µ—Ä–∞—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏–π
        one_time_events = load_one_time_events() # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        if str(call.message.chat.id) in one_time_events: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
            keyboard = types.InlineKeyboardMarkup()
#             # —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            button_numbering = [types.InlineKeyboardButton(text=str(numbering), callback_data="callbackDelOneTime_" + str(numbering)) for numbering in range(1, count_numbering + 1)]
            keyboard.add(*button_numbering)
            bot.send_message(call.message.chat.id, dict_lang["Number_event_delete"][lang], reply_markup=keyboard) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
#
        else: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.send_message(call.message.chat.id, dict_lang["you_dont_have_onte_time_event"][lang])
    try:
        if STATUS_DELETE == True and call.data in ["callbackDelOneTime_" + str(numbering) for numbering in range(1, count_numbering + 1)]:
            STATUS_DELETE == False # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            bot.delete_message(call.message.chat.id, call.message.message_id)
            one_time_events = load_one_time_events() # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
            if str(call.message.chat.id) in one_time_events: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
                find_numbering = find_numbering_schedule(str(call.message.chat.id), int(call.data[19:]),type_schedule="one_time")  # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
                if find_numbering != False: # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–∞–π–¥–µ–Ω
                    weekday, numbering = find_numbering # –ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ find_numbering_schedule
                    del one_time_events[str(call.message.chat.id)][weekday][numbering] # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
                    save_one_time_events(one_time_events)
                    bot.send_message(call.message.chat.id, dict_lang["Deleting_event"][lang])  # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
                    start(call.message)  # –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
                elif find_numbering == False: # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω
                    bot.send_message(call.message.chat.id, dict_lang["Incorrect_number_event"][lang])
                    start(call.message)
            else: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_message(call.message.chat.id, dict_lang["you_dont_have_onte_time_event"][lang])
                start(call.message)
    except: pass



# --------------------------- –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è -------------------------- #
    if call.data == "callback_cancel": # –æ—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        bot.delete_message(call.message.chat.id, call.message.message_id) # —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏
        selected_time_user = "" # –æ–±–Ω—É–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        start(call.message) # –≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é


# ============= –û–ë–†–ê–ë–û–¢–ß–ò–ö CALLBACK –ö–ù–û–ü–û–ö –ü–û –ì–û–õ–û–°–û–í–´–ú –°–û–û–ë–©–ï–ù–ò–Ø–ú ==================== #
    if call.data == "callback_save_voice":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        data_schedule = load_user_data() # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            index_weekday = [i for i in range(len(days_of_week)) if days_of_week[i][1] == ivent_user_voice[0]][0]  # –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            if str(call.message.chat.id) not in data_schedule:
                data_schedule[str(call.message.chat.id)] = [[], [], [], [], [], [], []]  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

                data_schedule[str(call.message.chat.id)][index_weekday].append(
                    {"WeekDay": ivent_user_voice[0], "Time": ivent_user_voice[1],
                     "Event": ivent_user_voice[2],"time_before":"0"})  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            else:
                data_schedule[str(call.message.chat.id)][index_weekday].append(
                    {"WeekDay": ivent_user_voice[0], "Time": ivent_user_voice[1],
                     "Event": ivent_user_voice[2],"time_before":"0"})  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            save_user_data(data_schedule)  # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(call.message.chat.id, dict["Saving_regular_event"][lang])
            start(call.message) # –≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é

        except: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            one_time_events = load_one_time_events()
            if str(call.message.chat.id) not in one_time_events:
                one_time_events[str(call.message.chat.id)] = [[]]
                one_time_events[str(call.message.chat.id)][0].append(
                    {"WeekDay": ivent_user_voice[0], "Time": ivent_user_voice[1],
                     "Event": ivent_user_voice[2]})
            else:
                one_time_events[str(call.message.chat.id)][0].append(
                    {"WeekDay": ivent_user_voice[0], "Time": ivent_user_voice[1],
                     "Event": ivent_user_voice[2]})
            save_one_time_events(one_time_events) # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            bot.send_message(call.message.chat.id, dict_lang["Saving_OT_event"][lang])
            start(call.message) # –≤–µ—Ä–Ω—É—Ç—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é


    if call.data == "callback_cancel_voice":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start(call.message)
# ==================================================================================== #


# ============================ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏—è ============================== #
@bot.message_handler(commands=['add_event'])
def add_event(message):
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global status_ivent
    bot.send_message(message.chat.id, dict_lang["Put_ivent"][lang])
    status_ivent = True # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª
# ==================================================================================== #


# ================================ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è ====================================== #
@bot.message_handler(func=lambda message: status_ivent == True, content_types=['text'])
def handle_enter_event(message):
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    global status_ivent # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è
    status_ivent = False # —Å–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–æ–±—ã—Ç–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    var_schedule.append(message.text) # –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ —Å–ø–∏—Å–æ–∫
    keyboard = types.InlineKeyboardMarkup()
    buttonSave = types.InlineKeyboardButton(text=dict_lang["button_save"][lang], callback_data="callback_save")
    buttonCancel = types.InlineKeyboardButton(text=dict_lang["button_cancel"][lang], callback_data="callback_cancel_save")
    keyboard.add(buttonSave);keyboard.add(buttonCancel)
    ending_ivent = ""
    for i in range(len(days_of_week)): # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        if var_schedule[0] in days_of_week[i]: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω, —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            ending_ivent = dict_lang[days_of_week[i][1]][lang]
            break  # –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞
    # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å–æ–±—ã—Ç–∏–µ–º –∏ —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot.send_message(message.chat.id, f'{dict_lang["question_save_event"][lang]} \n <b>{ending_ivent + " | " + var_schedule[1] + " | " + var_schedule[2]}</b>', reply_markup=keyboard, parse_mode='html')

# ==================================================================================== #



# =========== –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏ ============= #
@bot.message_handler(commands=['add_schedule'])
def add_schedule(message):
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    keyboard = types.InlineKeyboardMarkup()
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    index_lang = 1 if lang == "en" else 0 if lang == "ru" else 2
    buttonAll = [types.InlineKeyboardButton(text=day[index_lang], callback_data=day[1]) for day in days_of_week]
    keyboard.add(*buttonAll) # –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏
    bot.send_message(message.chat.id, dict_lang["select_weekday"][lang], reply_markup=keyboard)
# ==================================================================================== #


# ======================== –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–ë–´–¢–ò–Ø –í –†–ê–°–ü–ò–°–ê–ù–ò–ï ================================
def load_user_schedule(user_id):
    data_schedule = load_user_data() # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    index_weekday = [i for i in range(len(days_of_week)) if days_of_week[i][1] == var_schedule[0]][0] # –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏

    if str(user_id) not in data_schedule:
        data_schedule[str(user_id)] = [[], [], [], [], [], [], []] # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º

        data_schedule[str(user_id)][index_weekday].append(
            {"WeekDay": var_schedule[0], "Time": var_schedule[1],
             "Event": var_schedule[2],"time_before":var_schedule[3]})  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    else:
        data_schedule[str(user_id)][index_weekday].append(
            {"WeekDay": var_schedule[0], "Time": var_schedule[1],
             "Event": var_schedule[2],"time_before":var_schedule[3]}) # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    save_user_data(data_schedule) # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    var_schedule.clear() # –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
# ==================================================================================== #

# ======================== –ü–†–û–°–ú–û–¢–† –†–ê–°–ü–ò–°–ê–ù–ò–Ø ================================
def show_all_schedule(user_id, on_numbering,type_schedule):
    lang = load_data_user()[str(user_id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if type_schedule == "regular":
        data_schedule = load_user_data() # –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif type_schedule == "one_time":
        data_schedule = load_one_time_events()

    #days_of_week_ru = [day[0] for day in days_of_week] # –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    if str(user_id) in data_schedule: # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ —Ñ–∞–π–ª–µ
        output = ""; count_numbering = 0 # –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∏ –Ω–æ–º–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è
        for item, events in enumerate(data_schedule[str(user_id)]): # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            if not events: continue # –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª
            index_lang = 1 if lang == "en" else 0 if lang == "ru" else 2
            output += f"<u><b>{days_of_week[item][index_lang]}</b></u>:\n" # –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –≤—ã–≤–æ–¥ —Å–æ–±—ã—Ç–∏–π
            for idx, event in enumerate(events): # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
                # –¥–æ–±–∞–≤–∏—Ç—å –≤ –≤—ã–≤–æ–¥ –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è
                if on_numbering: count_numbering += 1; out_numbering = f"<b><u>{count_numbering}</u></b>) "
                else: out_numbering = "" # –∏–Ω–∞—á–µ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω—É–º–µ—Ä–∞—Ü–∏—é

                # ------------------ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–±—ã—Ç–∏—è –≤ –≤—ã–≤–æ–¥ ------------------ #

                output += f'{out_numbering}{number[int(event["Time"][0])]}{number[int(event["Time"][1])]}<b>:' \
                          f'</b>{number[int(event["Time"][3])]}{number[int(event["Time"][4])]} ' \
                          f' |_<u><i>{dict_lang["Ivent"][lang]}:</i>__{event["Event"]}</u> \n'
            bot.send_message(user_id, output, parse_mode="HTML")
            # ------------------------------------------------------------------------------ #
            output = "" # –æ—á–∏—Å—Ç–∏—Ç—å –≤—ã–≤–æ–¥
        return count_numbering # –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è, –¥–ª—è –±—É–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    else: bot.send_message(user_id, dict_lang["lack_schedule"][lang]) # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
# ==================================================================================== #


# ======================== –ü–û–ò–°–ö –ù–û–ú–ï–†–ê –°–û–ë–´–¢–ò–Ø ================================ #
def find_numbering_schedule(user_id, number_schedule, type_schedule):
    if type_schedule == "regular":
        data_schedule = load_user_data()
    elif type_schedule == "one_time":
        data_schedule = load_one_time_events()

    count = 0 # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–æ–±—ã—Ç–∏—è

    for i in range(len(data_schedule[user_id])): # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
        for j in range(len(data_schedule[user_id][i])): # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            count += 1 # —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–∞ 1
            if count == number_schedule: # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è —Ä–∞–≤–µ–Ω –∏—Å–∫–æ–º–æ–º—É
                return i,j # –≤–µ—Ä–Ω—É—Ç—å –∏–Ω–¥–µ–∫—Å –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è
            else: # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ —Ä–∞–≤–µ–Ω –∏—Å–∫–æ–º–æ–º—É, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª
                continue
            return False # –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–µ—Ä–Ω—É—Ç—å False
# ==================================================================================== #


# ======================== –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –°–ü–ò–°–ö–ê –í–°–ï–ú–ò –°–û–ë–´–¢–ò–Ø–ú–ò ================================
data_ivent = [] # —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
def get_ivent(on_time):
    if on_time == True: # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        data_schedule = load_user_data()
    else: # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        data_schedule = load_one_time_events()
    # ---------------------- –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π -------------------------------
    for key, item in data_schedule.items(): # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for iter_schedule in item: # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
            for iter_weekday in iter_schedule: # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
                # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–æ–±—ã—Ç–∏—è
                data_ivent.append([key, iter_weekday.get("WeekDay"), iter_weekday.get('Time'), iter_weekday.get('Event'), iter_weekday.get('time_before')])
# ==================================================================================== #


# ======================== –û–¢–ü–†–ê–í–ö–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ================================
def send_reminders():
    while True:
        get_ivent(False) # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
        get_ivent(True) # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        for ivent in data_ivent: # –ø–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
            if ivent[1] == time.strftime("%A") and ivent[2] == time.strftime("%H:%M") \
                or ivent[1] == time.strftime("%A") and ivent[2] == time.strftime("%H:%M", time.localtime(time.time() + int(ivent[4]) * 60)): # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º
                lang = load_data_user()[str(ivent[0])]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(int(ivent[0]), f"<b>‚ùóÔ∏è{dict_lang['Reminders'][lang]}‚ùóÔ∏è</b>\n{ivent[3]}", parse_mode="HTML")
            else: continue # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏—é

        # ======= –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π ================== #
        if time.strftime("%H:%M") == "23:59":
            data_schedule_one_time = load_one_time_events()
            data_schedule_one_time = {}
            save_one_time_events(data_schedule_one_time)
        # ================================================== #
        time.sleep(30) # –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 30 —Å–µ–∫—É–Ω–¥

        data_ivent.clear() # –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫



reminder_thread = Thread(target=send_reminders) # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_thread.start() # –∑–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞
# ==================================================================================== #

# ======================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–ó–û–í–´–• –°–û–ë–´–¢–ò–ô ================================
@bot.message_handler(func=lambda message: message.text[0] == "!" or message.text[0] == "*", content_types=['text'])
def handle_enter_event(message):
    one_time_events = load_one_time_events()
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if len(message.text[1:].split(" ")) > 1: # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –±–æ–ª—å—à–µ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–µ (–≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ)

        if int(message.text[1:6].split(":")[0]) < 23 or int(message.text[1:6].split(":")[1]) < 59:  # –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ

            if str(message.chat.id) not in one_time_events:
                one_time_events[str(message.chat.id)] = [[]]
                one_time_events[str(message.chat.id)][0].append({"WeekDay":  time.strftime("%A"), "Time": message.text[1:].split(" ")[0],
                                                        "Event": " ".join(message.text.split(" ")[1:]),"time_before":"0"})
            else:
                one_time_events[str(message.chat.id)][0].append({"WeekDay":  time.strftime("%A"), "Time": message.text[1:].split(" ")[0],
                                                        "Event": " ".join(message.text.split(" ")[1:]),"time_before":"0"})

            save_one_time_events(one_time_events)

            bot.send_message(message.chat.id, dict_lang["Saving_OT_event"][lang])
        else:
            bot.send_message(message.chat.id, dict_lang["Incorrect_time"][lang])
    else:
        bot.send_message(message.chat.id, dict_lang["Incorrect_enter_for_one_time_event"][lang])
# ==================================================================================== #

# ========================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–û–õ–û–°–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================================
@bot.message_handler(content_types=['voice'])
def voice_processing(message):
    lang = load_data_user()[str(message.chat.id)]["lang"] # –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    global number_dict # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è —Å —á–∏—Å–ª–∞–º–∏
    answer_message = bot.send_message(message.chat.id, dict_lang["Waiting_processing"][lang]) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –æ–± –æ–∂–∏–¥–∞–Ω–∏–µ
    file_info = bot.get_file(message.voice.file_id) # –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    downloaded_file = bot.download_file(file_info.file_path) # —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    with open('new_file.ogg', 'wb') as new_file: # —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º new_file.ogg
        new_file.write(downloaded_file) # –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –†–∞–±–æ—Ç–∞ —Å API AssemblyAI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        aai.settings.api_key = f"TOKEN"

        FILE_URL = 'new_file.ogg' # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        config = aai.TranscriptionConfig(language_code="ru") # —è–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        transcriber = aai.Transcriber(config=config) # —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        transcript = transcriber.transcribe(FILE_URL) # —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é transcript

        text_voice = transcript.text.lower().split(" ") # —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ª–æ–≤–∞

        # ------- —É–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è --------------
        for i in range(len(text_voice)):
            text_voice[i] = text_voice[i].replace(',', '')
            text_voice[i] = text_voice[i].replace('.', '')
            text_voice[i] = text_voice[i].replace('-', '')
        # -------------------------------------------------

        # ------- –ø–æ–∏—Å–∫ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ --------------
        try: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            week_day_en = [day[1] for day in days_of_week if day[0].lower() == text_voice[0]][0]
            type_ivent = "every_week"
        except: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ - –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ä–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            week_day_en = "–†–∞–∑–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"
            type_ivent = "one_time"
        # -------------------------------------------------------------


        time_ivent, index_word = "", 0 # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–Ω–¥–µ–∫—Å–∞ —Å–ª–æ–≤–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
        index_word = 1 if type_ivent == "every_week" else 0 # –µ—Å–ª–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ —Ä–∞–≤–µ–Ω 1, –∏–Ω–∞—á–µ 0

        # --------------—Ü–∏–∫–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ --------------------
        last_symb = 0 # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–º–≤–æ–ª–∞

        for word in text_voice[index_word:]: # –ø–µ—Ä–µ–±–æ—Ä —Å–ª–æ–≤ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            if len(time_ivent) == 2: # –µ—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π time_ivent 2 —Å–∏–º–≤–æ–ª–∞
                time_ivent += ":" # –¥–æ–±–∞–≤–∏—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ

            if len(time_ivent) == 5: # –µ—Å–ª–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π time_ivent 5 —Å–∏–º–≤–æ–ª–æ–≤ ( –ø–æ–ª—å–Ω–æ—Å—Ç—å—é –≤–≤–µ–¥–µ–Ω–æ –≤—Ä–µ–º—è)
                if number_dict.get(word.lower()) != None: # –µ—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                    time_ivent = time_ivent[:-1] + str(number_dict.get(word.lower())) # –∑–∞–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –Ω–∞ —á–∏—Å–ª–æ
                    last_symb = 1 # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ 1

                index_word = text_voice.index(word) + last_symb # –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                break # –≤—ã–π—Ç–∏ –∏–∑ —Ü–∏–∫–ª–∞

            if number_dict.get(word.lower()) != None: # –µ—Å–ª–∏ —Å–ª–æ–≤–æ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
                time_ivent += str(number_dict.get(word.lower())) # –¥–æ–±–∞–≤–∏—Ç—å —á–∏—Å–ª–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é time_ivent
            try: # –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
                if int(word): time_ivent = f'{word[0:2]}:{word[2:4]}' # –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é time_ivent –≤—Ä–µ–º—è
            except: continue # –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ü–∏–∫–ª –≤ —Å–ª—É—á–∞–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ª–æ–≤–∏—é
        # ------------------------------------------------------------------------------------- #

        text_voice_ivent = " ".join(text_voice[index_word:]) # –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å–ª–æ–≤–∞ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        try: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            week_day_ivent = dict_lang[week_day_en][lang]
        except: # –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
            week_day_ivent = dict_lang["One_time_event"][lang]

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–≤–µ–¥–µ–Ω–æ –ª–∏ –≤—Ä–µ–º—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (HH:MM)
        if len(time_ivent) != 5: # –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            bot.edit_message_text(chat_id=message.chat.id, message_id=answer_message.message_id, text=dict_lang["Incorrect_time"][lang]) # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            time_ivent = "" # –æ–±–Ω—É–ª–∏—Ç—å –≤—Ä–µ–º—è
        else:
            # –≤—ã–≤–æ–¥ –∏—Ç–æ–≥ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            output = f'<b>|{week_day_ivent}| <u>|{time_ivent}|</u> |{text_voice_ivent}|</b>' # –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

            # –æ—á–∏—â–∞—é —Å–ø–∏—Å–æ–∫ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —è–≤–ª—è—é—â–∏–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤—Ä–µ–º—è –∏ —Å–æ–±—ã—Ç–∏–µ
            ivent_user_voice.clear(); ivent_user_voice.extend([week_day_en, time_ivent, text_voice_ivent])
            # –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–∞–π–ª–µ –∏ –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "–û—Ç–º–µ–Ω–∞"
            keyboard = types.InlineKeyboardMarkup()
            buttonSave = types.InlineKeyboardButton(text=dict_lang["button_save"][lang], callback_data="callback_save_voice")
            buttonCancel = types.InlineKeyboardButton(text=dict_lang["button_cancel"][lang], callback_data="callback_cancel_voice")
            keyboard.add(buttonSave,buttonCancel)
            bot.edit_message_text(chat_id=message.chat.id, message_id=answer_message.message_id, text=f'{dict_lang["Question_correct_event"][lang]}\n {output}', reply_markup=keyboard, parse_mode='html')
            # –ø—Ä–∏ callback –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫



if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    # –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á—Ç–æ–± –æ–Ω —Ä–∞–±–æ—Ç–∞–ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
    bot.polling(none_stop=True, interval=0, timeout=0)
